use ssh2::Session;
use std::net::TcpStream;

fn main() {
    let tcp = TcpStream::connect("localhost:24").unwrap();
    let mut sess = Session::new().unwrap();
    sess.handshake(&tcp).unwrap();
    sess.userauth_password("test", Some("test")).unwrap(); // Replace "password" with the actual password

    if sess.authenticated() {
        println!("SSH connection established!");

        // Perform additional SSH operations or keep the connection alive

        // Example: Execute a command on the remote server
        let mut channel = sess.channel_session().unwrap();
        channel.exec("ls").unwrap();
        let mut output = Vec::new();
        channel.read_to_end(&mut output).unwrap();
        println!("{}", String::from_utf8_lossy(&output));

        // Keep the connection alive indefinitely
        loop {
            std::thread::sleep(std::time::Duration::from_secs(60)); // Adjust the duration as needed
        }
    } else {
        println!("Failed to authenticate SSH connection!");
    }
}

//Generated by ChatGPT